print ("ds")
setwd("~/Projects/UdemyAtoZML/2_Regression/2.1_Simple_Linear_Regression")
dataset = read.csv('Salary_Data.csv')
View(dataset)
View(dataset)
library(caTools)
set.seed(123) #set seed so that every time we get the same random result
#sample.split() will randomly select specified percentage of tuples to be the training
#set and label them as TRUE. The test set tuples are labeled as FALSE
split = sample.split(dataset$Salary, SplitRatio = 2/3)
#create traning set and test set based on the TRUE and FALSE label created in the
#last step in dataset
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set
)
#show statistical results of the regressor
summary(regressor)
#Step 4: Predicting the Test set result
y_pred = predict(regressor, newdata = test_set)
installed.packages('ggplot2')
#Step 5: Visualising the Training set results
install.packages('ggplot2')
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test set)') +
xlab('Years of experience') +
ylab('Salary')
setwd("~/Projects/UdemyAtoZML/2_Regression/2.2_Multiple_Linear_Regression")
dataset = read.csv('50_Startups.csv')
View(dataset)
View(dataset)
View(dataset)
#Step 2: Convert categorical data to dummy variables
dataset$State = factor(dataset$State,
levels = c('California', 'Florida', 'New York'), #c() means vector in R
labels = c(1, 2, 3))
View(dataset)
library(caTools)
set.seed(123) #set seed so that every time we get the same random result
#sample.split() will randomly select specified percentage of tuples to be the training
#set and label them as TRUE. The test set tuples are labeled as FALSE
split = sample.split(dataset$Profit, SplitRatio = 0.8)
#create traning set and test set based on the TRUE and FALSE label created in the
#last step in dataset
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(test_set)
regressor = lm(formula = Profit ~ ., # OR: formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set
)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
